!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){new class{constructor(){this.initialize()}initialize(){this.api="https://api.myjson.com/bins/kez8a",this.appStore={},this.noOfJobjs=0,this.experienceList=[],this.locationList=[],this.searchReult=[],this.$el=$(".main-wrapper"),this.events(),this.getApiData()}events(){let e=this;$("#js-getApps").on("click",function(){e.getApiData()}),$("a.app-card").on("click",function(t){t.preventDefault();let n=$(this).attr("data-href");console.log(e.getAppsById(n))}),$("#job-search-form").on("submit",function(t){t.preventDefault();let n=e.$el.find("#js-experience").val(),a=e.$el.find("#js-location").val(),i=e.$el.find("#js-search").val();e.jobSearch(n,a,i)}),$("#js-location--filter, #js-sort-by").on("click",function(){let t=$(this).data("type");e.jobSorting(t)})}getApiData(){let e=this;$.getJSON(this.api,function(t){e.appStore=t.jobsfeed,e.renderApps()})}renderApps(){this.renderComponents(),this.appCardTemplate(this.appStore)}renderComponents(){let e=this;$.each(this.appStore,function(t,n){e.uniqueDataPush(e.experienceList,n.experience),e.uniqueDataPush(e.locationList,n.location)}),this.renderSearchItems($("#js-experience")," - Experience - ",this.experienceList.sort((e,t)=>e-t)),this.renderSearchItems($("#js-location")," - Location - ",this.locationList.sort()),this.$el.find("#js-total-result").html(this.appStore.length)}uniqueDataPush(e,t){$.inArray(t,e)<0?e.push(t):e.splice($.inArray(t,e),1)}renderSearchItems(e,t,n){let a=`<option value="">${t}</option>`;$.each(n,function(e,t){a+=`<option value="${t}">${t}</option>`}),e.html(a)}templateEmptyCheck(e,t){return e?t:""}appCardTemplate(e){let t="",n=this;e&&e.length?$.each(e,function(e,a){t+=`<div class="col-xs-12 col-md-6 mb-3">\n                                <a href="${a.applyink}" class="job-card__box bg-white">\n                                    <div class="job-card__box--title">\n                                        ${n.templateEmptyCheck(a.title,`<h4 class="float-left">${a.title}</h4>`)}\n                                        ${n.templateEmptyCheck(a.salary,`<label class="badge badge-light">${a.salary}</label>`)}\n                                        ${n.templateEmptyCheck(a.type,`<span class="badge badge-light">${a.type}</span>`)}\n                                    </div>\n                                    <div class="job-card__box--company">\n                                        ${n.templateEmptyCheck(a.companyname,`<label><img src="assets/img/three-buildings.svg" alt="Office"> ${a.companyname}</label>`)}\n                                        ${n.templateEmptyCheck(a.location,`<label><img src="assets/img/location-pointer.svg" alt="Office"> ${a.location}</label>`)}\n                                    </div>\n                                    <div class="job-card__box--date">\n                                        ${n.templateEmptyCheck(a.salary,`<label>Start: <span>${a.startdate}</span></label> -`)}\n                                        ${n.templateEmptyCheck(a.salary,`<label>End: <span>${a.startdate}</span></label>`)}\n                                    </div>\n                                    <div class="job-card__box--others">\n                                        ${n.templateEmptyCheck(a.salary,`<label>Source: ${a.source}</label>`)}\n                                        <button href="${a.applyink}" title="Apply" class="btn btn-sm btn-success float-right">Apply</button>\n                                    </div>\n                                </a>\n                            </div>`}):t+='<div class="col-xs-12 col-md-12 text-center mb-3"><h4>No Jobs Found!</h4></div>',$(".job-card__results").empty().html(t)}findItem(e,t){for(var n=[],a=0;a<e.length;a++){var i=e[a];for(var r in i)if(i[r].toString().toLowerCase().indexOf(t)>-1){n.push(i);break}}return n}jobSearch(e,t,n){let a=this,i=this.appStore,r=[];this.searchReult=[],e&&r.length>0?r=r.filter(function(t){return t.experience==e}):e&&(r=i.filter(function(t){return t.experience==e})),r.length>0&&t?r=r.filter(function(e){return e.location==t}):t&&(r=i.filter(function(e){return e.location==t})),r.length&&n?r=a.findItem(r,n):0===r.length&&(r=a.findItem(i,n)),this.searchReult=r,a.renderJobSearchResult(r)}renderJobSearchResult(e){this.$el.find("#js-total-result").html(e.length),this.appCardTemplate(e)}jobSorting(e){let t=this.searchReult&&this.searchReult.length?this.searchReult:this.appStore;"location"==e&&(t=t.sort((e,t)=>e.location!==t.location?e.location<t.location?-1:1:0)),"experience"==e&&(t=t.sort((e,t)=>parseInt(e.experience)-parseInt(t.experience))),this.renderJobSearchResult(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,