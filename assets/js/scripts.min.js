!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){new class{constructor(){this.initialize()}initialize(){this.api="https://api.myjson.com/bins/kez8a",this.appStore={},this.noOfJobjs=0,this.experienceList=[],this.locationList=[],this.searchReult=[],this.$el=$(".main-wrapper"),this.events(),this.getApiData()}events(){let e=this;$("#js-getApps").on("click",function(){e.getApiData()}),$("a.app-card").on("click",function(t){t.preventDefault();let n=$(this).attr("data-href");console.log(e.getAppsById(n))}),$("#job-search-form").on("submit",function(t){t.preventDefault();let n=e.$el.find("#js-experience").val(),a=e.$el.find("#js-location").val(),i=e.$el.find("#js-search").val();e.jobSearch(n,a,i)}),$("#js-location--filter, #js-sort-by").on("click",function(){let t=$(this).data("type");e.jobSorting(t)})}getApiData(){let e=this;$.getJSON(this.api,function(t){e.appStore=t.jobsfeed,e.renderApps()})}renderApps(){this.renderComponents(),this.appCardTemplate(this.appStore)}renderComponents(){let e=this;$.each(this.appStore,function(t,n){e.uniqueDataPush(e.experienceList,n.experience),e.uniqueDataPush(e.locationList,n.location)}),this.renderSearchItems($("#js-experience")," - Experience - ",this.experienceList.sort((e,t)=>e-t)),this.renderSearchItems($("#js-location")," - Location - ",this.locationList.sort()),this.$el.find("#js-total-result").html(this.appStore.length)}uniqueDataPush(e,t){$.inArray(t,e)<0?e.push(t):e.splice($.inArray(t,e),1)}renderSearchItems(e,t,n){let a=`<option value="">${t}</option>`;$.each(n,function(e,t){a+=`<option value="${t}">${t}</option>`}),e.html(a)}templateEmptyCheck(e,t){return e?t:""}appCardTemplate(e){let t="",n=this;e&&e.length?$.each(e,function(e,a){t+=`<div class="col-xs-12 col-md-6 mb-3">\n                                <a href="${a.applyink}" class="job-card__box bg-white">\n                                    <div class="job-card__box--title">\n                                        ${n.templateEmptyCheck(a.title,`<h4 class="float-left">${a.title}</h4>`)}\n                                        ${n.templateEmptyCheck(a.salary,`<label class="badge badge-light">${a.salary}</label>`)}\n                                        ${n.templateEmptyCheck(a.type,`<span class="badge badge-light">${a.type}</span>`)}\n                                    </div>\n                                    <div class="job-card__box--company">\n                                        ${n.templateEmptyCheck(a.companyname,`<label><img src="assets/img/three-buildings.svg" alt="Office"> ${a.companyname}</label>`)}\n                                        ${n.templateEmptyCheck(a.location,`<label><img src="assets/img/location-pointer.svg" alt="Office"> ${a.location}</label>`)}\n                                    </div>\n                                    <div class="job-card__box--date">\n                                        ${n.templateEmptyCheck(a.salary,`<label>Start: <span>${a.startdate}</span></label> -`)}\n                                        ${n.templateEmptyCheck(a.salary,`<label>End: <span>${a.startdate}</span></label>`)}\n                                    </div>\n                                    <div class="job-card__box--others">\n                                        ${n.templateEmptyCheck(a.salary,`<label>Source: ${a.source}</label>`)}\n                                        <button href="${a.applyink}" title="Apply" class="btn btn-sm btn-success float-right">Apply</button>\n                                    </div>\n                                </a>\n                            </div>`}):t+='<div class="col-xs-12 col-md-12 text-center mb-3"><h4>No Jobs Found!</h4></div>',$(".job-card__results").empty().html(t)}findItem(e,t){for(var n=[],a=0;a<e.length;a++){var i=e[a];for(var r in i)if(i[r].toString().toLowerCase().indexOf(t)>-1){n.push(i);break}}return n}jobSearch(e,t,n){let a=this,i=this.appStore,r=[];this.searchReult=[],e&&r.length>0?r=r.filter(function(t){return t.experience==e}):e&&(r=i.filter(function(t){return t.experience==e})),r.length>0&&t?r=r.filter(function(e){return e.location==t}):t&&(r=i.filter(function(e){return e.location==t})),r.length&&n?r=a.findItem(r,n):0===r.length&&n&&(r=a.findItem(i,n)),a.renderJobSearchResult(r)}renderJobSearchResult(e){this.$el.find("#js-total-result").html(e.length),this.appCardTemplate(e)}jobSorting(e){let t=this.searchReult&&this.searchReult.length?this.searchReult:this.appStore;"location"==e&&(t=t.sort((e,t)=>e.location!==t.location?e.location<t.location?-1:1:0)),"experience"==e&&(t=t.sort((e,t)=>parseInt(e.experience)-parseInt(t.experience))),this.renderJobSearchResult(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9qcy9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsImluaXRpYWxpemUiLCJhcGkiLCJhcHBTdG9yZSIsIm5vT2ZKb2JqcyIsImV4cGVyaWVuY2VMaXN0IiwibG9jYXRpb25MaXN0Iiwic2VhcmNoUmV1bHQiLCIkZWwiLCIkIiwiZXZlbnRzIiwiZ2V0QXBpRGF0YSIsInNlbGYiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNlbGVjdGVkQXBwSWQiLCJhdHRyIiwiY29uc29sZSIsImxvZyIsImdldEFwcHNCeUlkIiwiZXhwZXJpZW5jZSIsImZpbmQiLCJ2YWwiLCJsb2NhdGlvbiIsInNlcmFjaFRlcm0iLCJqb2JTZWFyY2giLCJ0eXBlIiwiZGF0YSIsImpvYlNvcnRpbmciLCJnZXRKU09OIiwianNvbiIsImpvYnNmZWVkIiwicmVuZGVyQXBwcyIsInJlbmRlckNvbXBvbmVudHMiLCJhcHBDYXJkVGVtcGxhdGUiLCJlYWNoIiwiZiIsInVuaXF1ZURhdGFQdXNoIiwicmVuZGVyU2VhcmNoSXRlbXMiLCJzb3J0IiwiYSIsImIiLCJodG1sIiwibGVuZ3RoIiwiZmlsdGVycyIsIm5ld0ZpbHRlciIsImluQXJyYXkiLCJwdXNoIiwic3BsaWNlIiwiJHRhcmdldCIsInBsYWNlaG9sZGVyIiwiX3RlbXBsYXRlIiwidGVtcGxhdGUiLCJhcHBseWluayIsInRlbXBsYXRlRW1wdHlDaGVjayIsInRpdGxlIiwic2FsYXJ5IiwiY29tcGFueW5hbWUiLCJzdGFydGRhdGUiLCJzb3VyY2UiLCJlbXB0eSIsImFyciIsInRlcm0iLCJpdGVtcyIsIml0ZW0iLCJwcm9wIiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJyZXN1bHQiLCJmaWx0ZXIiLCJqb2IiLCJmaW5kSXRlbSIsInJlbmRlckpvYlNlYXJjaFJlc3VsdCIsInBhcnNlSW50Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFx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QSxJQUFBYixFQUFBWixLQUNBRyxFQUFBSCxLQUFBRyxTQUNBbUUsRUFBQSxHQUNBdEUsS0FBQU8sWUFBQSxHQUVBYyxHQUFBaUQsRUFBQTFCLE9BQUEsRUFDQTBCLElBQUFDLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBbkQsZ0JBRVNBLElBQ1RpRCxFQUFBbkUsRUFBQW9FLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBbkQsaUJBSUFpRCxFQUFBMUIsT0FBQSxHQUFBcEIsRUFDQThDLElBQUFDLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBaEQsY0FFU0EsSUFDVDhDLEVBQUFuRSxFQUFBb0UsT0FBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUFoRCxlQUlBOEMsRUFBQTFCLFFBQUFuQixFQUNBNkMsRUFBQTFELEVBQUE2RCxTQUFBSCxFQUFBN0MsR0FDUyxJQUFBNkMsRUFBQTFCLFFBQUFuQixJQUNUNkMsRUFBQTFELEVBQUE2RCxTQUFBdEUsRUFBQXNCLElBSUFiLEVBQUE4RCxzQkFBQUosR0FPQXZFLHNCQUFBNkIsR0FDQTVCLEtBQUFRLElBQUFjLEtBQUEsb0JBQUFxQixLQUFBZixFQUFBZ0IsUUFDQTVDLEtBQUFtQyxnQkFBQVAsR0FPQTdCLFdBQUE0QixHQUNBLElBQUEyQyxFQUFBdEUsS0FBQU8sYUFBQVAsS0FBQU8sWUFBQXFDLE9BQUE1QyxLQUFBTyxZQUFBUCxLQUFBRyxTQUNBLFlBQUF3QixJQUNBMkMsSUFBQTlCLEtBQUEsQ0FBQUMsRUFBQUMsSUFBQUQsRUFBQWpCLFdBQUFrQixFQUFBbEIsU0FBQWlCLEVBQUFqQixTQUFBa0IsRUFBQWxCLFVBQUEsUUFHQSxjQUFBRyxJQUNBMkMsSUFBQTlCLEtBQUEsQ0FBQUMsRUFBQUMsSUFBQWlDLFNBQUFsQyxFQUFBcEIsWUFBQXNELFNBQUFqQyxFQUFBckIsY0FHQXJCLEtBQUEwRSxzQkFBQUoiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKipcbiAqIEpvYiBTZWFyY2ggQXBwXG4gKi9cblxuY2xhc3MgSm9iU2VhcmNoQXBwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKClcbiAgICB9XG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmFwaSA9ICdodHRwczovL2FwaS5teWpzb24uY29tL2JpbnMva2V6OGEnO1xuICAgICAgICB0aGlzLmFwcFN0b3JlID0ge307XG4gICAgICAgIHRoaXMubm9PZkpvYmpzID0gMDtcbiAgICAgICAgdGhpcy5leHBlcmllbmNlTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmxvY2F0aW9uTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLnNlYXJjaFJldWx0ID0gW107XG4gICAgICAgIHRoaXMuJGVsID0gJCgnLm1haW4td3JhcHBlcicpO1xuXG4gICAgICAgIC8vRXZlbnRzXG4gICAgICAgIHRoaXMuZXZlbnRzKCk7XG5cbiAgICAgICAgLy9pbml0XG4gICAgICAgIHRoaXMuZ2V0QXBpRGF0YSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIEV2ZW50c1xuICAgICAqL1xuICAgIGV2ZW50cygpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICAkKFwiI2pzLWdldEFwcHNcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmdldEFwaURhdGEoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChcImEuYXBwLWNhcmRcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGV0IHNlbGVjdGVkQXBwSWQgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWhyZWZcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzZWxmLmdldEFwcHNCeUlkKHNlbGVjdGVkQXBwSWQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9qb2Igc2VyYWNoXG4gICAgICAgICQoXCIjam9iLXNlYXJjaC1mb3JtXCIpLm9uKFwic3VibWl0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsZXQgZXhwZXJpZW5jZSA9IHNlbGYuJGVsLmZpbmQoXCIjanMtZXhwZXJpZW5jZVwiKS52YWwoKTtcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbiA9IHNlbGYuJGVsLmZpbmQoXCIjanMtbG9jYXRpb25cIikudmFsKCk7XG4gICAgICAgICAgICBsZXQgc2VyYWNoVGVybSA9IHNlbGYuJGVsLmZpbmQoXCIjanMtc2VhcmNoXCIpLnZhbCgpO1xuICAgICAgICAgICAgc2VsZi5qb2JTZWFyY2goZXhwZXJpZW5jZSwgbG9jYXRpb24sIHNlcmFjaFRlcm0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL3NvcnQgYnlcbiAgICAgICAgJCgnI2pzLWxvY2F0aW9uLS1maWx0ZXIsICNqcy1zb3J0LWJ5Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IHR5cGUgPSAkKHRoaXMpLmRhdGEoJ3R5cGUnKTtcbiAgICAgICAgICAgIHNlbGYuam9iU29ydGluZyh0eXBlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGRhdGEgZnJvbSBBUElcbiAgICAgKi9cbiAgICBnZXRBcGlEYXRhKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgICQuZ2V0SlNPTih0aGlzLmFwaSwgZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgICAgIHNlbGYuYXBwU3RvcmUgPSBqc29uLmpvYnNmZWVkO1xuICAgICAgICAgICAgc2VsZi5yZW5kZXJBcHBzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBBcHBzXG4gICAgICovXG4gICAgcmVuZGVyQXBwcygpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDb21wb25lbnRzKCk7XG4gICAgICAgIHRoaXMuYXBwQ2FyZFRlbXBsYXRlKHRoaXMuYXBwU3RvcmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBzdGF0aWMgY29tcG9uZW50c1xuICAgICAqL1xuICAgIHJlbmRlckNvbXBvbmVudHMoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgJC5lYWNoKHRoaXMuYXBwU3RvcmUsIGZ1bmN0aW9uIChpLCBmKSB7XG4gICAgICAgICAgICBzZWxmLnVuaXF1ZURhdGFQdXNoKHNlbGYuZXhwZXJpZW5jZUxpc3QsIGYuZXhwZXJpZW5jZSk7XG4gICAgICAgICAgICBzZWxmLnVuaXF1ZURhdGFQdXNoKHNlbGYubG9jYXRpb25MaXN0LCBmLmxvY2F0aW9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9yZW5kZXIgc3RhdGljIGNvbXBvbmVudHNcbiAgICAgICAgdGhpcy5yZW5kZXJTZWFyY2hJdGVtcygkKFwiI2pzLWV4cGVyaWVuY2VcIiksICcgLSBFeHBlcmllbmNlIC0gJywgdGhpcy5leHBlcmllbmNlTGlzdC5zb3J0KChhLCBiKSA9PiBhIC0gYikpO1xuICAgICAgICB0aGlzLnJlbmRlclNlYXJjaEl0ZW1zKCQoXCIjanMtbG9jYXRpb25cIiksICcgLSBMb2NhdGlvbiAtICcsIHRoaXMubG9jYXRpb25MaXN0LnNvcnQoKSk7XG5cbiAgICAgICAgdGhpcy4kZWwuZmluZCgnI2pzLXRvdGFsLXJlc3VsdCcpLmh0bWwodGhpcy5hcHBTdG9yZS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1c2ggdW5pcXVlIGl0ZW0gdG8gYXJyYXlcbiAgICAgKiBAcGFyYW0gZmlsdGVyc1xuICAgICAqIEBwYXJhbSBuZXdGaWx0ZXJcbiAgICAgKi9cbiAgICB1bmlxdWVEYXRhUHVzaChmaWx0ZXJzLCBuZXdGaWx0ZXIpIHtcbiAgICAgICAgaWYgKCQuaW5BcnJheShuZXdGaWx0ZXIsIGZpbHRlcnMpIDwgMCkge1xuICAgICAgICAgICAgZmlsdGVycy5wdXNoKG5ld0ZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaWx0ZXJzLnNwbGljZSgkLmluQXJyYXkobmV3RmlsdGVyLCBmaWx0ZXJzKSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgY29tcG9uZW50cyB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSAkdGFyZ2V0XG4gICAgICogQHBhcmFtIHBsYWNlaG9sZGVyXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICByZW5kZXJTZWFyY2hJdGVtcygkdGFyZ2V0LCBwbGFjZWhvbGRlciwgZGF0YSkge1xuICAgICAgICBsZXQgX3RlbXBsYXRlID0gYDxvcHRpb24gdmFsdWU9XCJcIj4ke3BsYWNlaG9sZGVyfTwvb3B0aW9uPmA7XG4gICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbiAoaSwgZikge1xuICAgICAgICAgICAgX3RlbXBsYXRlICs9IGA8b3B0aW9uIHZhbHVlPVwiJHtmfVwiPiR7Zn08L29wdGlvbj5gO1xuICAgICAgICB9KTtcbiAgICAgICAgJHRhcmdldC5odG1sKF90ZW1wbGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1wdHkgY2hlY2sgdXRpbFxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHBhcmFtIHRlbXBsYXRlXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgdGVtcGxhdGVFbXB0eUNoZWNrKGRhdGEsIHRlbXBsYXRlKSB7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcCBjYXJkIHRlbXBsYXRlXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7SFRNTH1cbiAgICAgKi9cbiAgICBhcHBDYXJkVGVtcGxhdGUoZGF0YSkge1xuICAgICAgICBsZXQgX3RlbXBsYXRlID0gJycsXG4gICAgICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbiAoaSwgZikge1xuICAgICAgICAgICAgICAgIF90ZW1wbGF0ZSArPSBgPGRpdiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbWQtNiBtYi0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIke2YuYXBwbHlpbmt9XCIgY2xhc3M9XCJqb2ItY2FyZF9fYm94IGJnLXdoaXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiam9iLWNhcmRfX2JveC0tdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3NlbGYudGVtcGxhdGVFbXB0eUNoZWNrKGYudGl0bGUsIGA8aDQgY2xhc3M9XCJmbG9hdC1sZWZ0XCI+JHtmLnRpdGxlfTwvaDQ+YCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtzZWxmLnRlbXBsYXRlRW1wdHlDaGVjayhmLnNhbGFyeSwgYDxsYWJlbCBjbGFzcz1cImJhZGdlIGJhZGdlLWxpZ2h0XCI+JHtmLnNhbGFyeX08L2xhYmVsPmApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7c2VsZi50ZW1wbGF0ZUVtcHR5Q2hlY2soZi50eXBlLCBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiYWRnZS1saWdodFwiPiR7Zi50eXBlfTwvc3Bhbj5gKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpvYi1jYXJkX19ib3gtLWNvbXBhbnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3NlbGYudGVtcGxhdGVFbXB0eUNoZWNrKGYuY29tcGFueW5hbWUsIGA8bGFiZWw+PGltZyBzcmM9XCJhc3NldHMvaW1nL3RocmVlLWJ1aWxkaW5ncy5zdmdcIiBhbHQ9XCJPZmZpY2VcIj4gJHtmLmNvbXBhbnluYW1lfTwvbGFiZWw+YCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtzZWxmLnRlbXBsYXRlRW1wdHlDaGVjayhmLmxvY2F0aW9uLCBgPGxhYmVsPjxpbWcgc3JjPVwiYXNzZXRzL2ltZy9sb2NhdGlvbi1wb2ludGVyLnN2Z1wiIGFsdD1cIk9mZmljZVwiPiAke2YubG9jYXRpb259PC9sYWJlbD5gKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpvYi1jYXJkX19ib3gtLWRhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3NlbGYudGVtcGxhdGVFbXB0eUNoZWNrKGYuc2FsYXJ5LCBgPGxhYmVsPlN0YXJ0OiA8c3Bhbj4ke2Yuc3RhcnRkYXRlfTwvc3Bhbj48L2xhYmVsPiAtYCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtzZWxmLnRlbXBsYXRlRW1wdHlDaGVjayhmLnNhbGFyeSwgYDxsYWJlbD5FbmQ6IDxzcGFuPiR7Zi5zdGFydGRhdGV9PC9zcGFuPjwvbGFiZWw+YCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqb2ItY2FyZF9fYm94LS1vdGhlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3NlbGYudGVtcGxhdGVFbXB0eUNoZWNrKGYuc2FsYXJ5LCBgPGxhYmVsPlNvdXJjZTogJHtmLnNvdXJjZX08L2xhYmVsPmApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaHJlZj1cIiR7Zi5hcHBseWlua31cIiB0aXRsZT1cIkFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zdWNjZXNzIGZsb2F0LXJpZ2h0XCI+QXBwbHk8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RlbXBsYXRlICs9IGA8ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC0xMiB0ZXh0LWNlbnRlciBtYi0zXCI+PGg0Pk5vIEpvYnMgRm91bmQhPC9oND48L2Rpdj5gO1xuICAgICAgICB9XG5cbiAgICAgICAgJChcIi5qb2ItY2FyZF9fcmVzdWx0c1wiKS5lbXB0eSgpLmh0bWwoX3RlbXBsYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFuIGl0ZW0gaW4gQXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyXG4gICAgICogQHBhcmFtIHRlcm1cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZmluZEl0ZW0oYXJyLCB0ZXJtKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcnJbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZGV0YWlsID0gaXRlbVtwcm9wXS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFpbC5pbmRleE9mKHRlcm0pID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEpvYiBTZWFyY2ggQmFzZWQgdXNlciBpbnB1dHNcbiAgICAgKiBAcGFyYW0gZXhwZXJpZW5jZVxuICAgICAqIEBwYXJhbSBsb2NhdGlvblxuICAgICAqIEBwYXJhbSBzZXJhY2hUZXJtXG4gICAgICovXG4gICAgam9iU2VhcmNoKGV4cGVyaWVuY2UsIGxvY2F0aW9uLCBzZXJhY2hUZXJtKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGFwcFN0b3JlID0gdGhpcy5hcHBTdG9yZSxcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICB0aGlzLnNlYXJjaFJldWx0ID0gW107XG5cbiAgICAgICAgaWYgKGV4cGVyaWVuY2UgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoZnVuY3Rpb24gKGpvYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBqb2IuZXhwZXJpZW5jZSA9PSBleHBlcmllbmNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwZXJpZW5jZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYXBwU3RvcmUuZmlsdGVyKGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gam9iLmV4cGVyaWVuY2UgPT0gZXhwZXJpZW5jZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwICYmIGxvY2F0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gam9iLmxvY2F0aW9uID09IGxvY2F0aW9uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGFwcFN0b3JlLmZpbHRlcihmdW5jdGlvbiAoam9iKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpvYi5sb2NhdGlvbiA9PSBsb2NhdGlvbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggJiYgc2VyYWNoVGVybSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5maW5kSXRlbShyZXN1bHQsIHNlcmFjaFRlcm0pO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggPT09IDAgJiYgc2VyYWNoVGVybSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5maW5kSXRlbShhcHBTdG9yZSwgc2VyYWNoVGVybSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLnNlYXJjaFJldWx0ID0gcmVzdWx0O1xuICAgICAgICBzZWxmLnJlbmRlckpvYlNlYXJjaFJlc3VsdChyZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgcmVuZGVyIGpvYiBjYXJkXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICByZW5kZXJKb2JTZWFyY2hSZXN1bHQoZGF0YSkge1xuICAgICAgICB0aGlzLiRlbC5maW5kKCcjanMtdG90YWwtcmVzdWx0JykuaHRtbChkYXRhLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuYXBwQ2FyZFRlbXBsYXRlKGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNvcnRpbmcgc2VhcmNoIHJlc3VsdFxuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICovXG4gICAgam9iU29ydGluZyh0eXBlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAodGhpcy5zZWFyY2hSZXVsdCAmJiB0aGlzLnNlYXJjaFJldWx0Lmxlbmd0aCkgPyB0aGlzLnNlYXJjaFJldWx0IDogdGhpcy5hcHBTdG9yZTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ2xvY2F0aW9uJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNvcnQoKGEsIGIpID0+IGEubG9jYXRpb24gIT09IGIubG9jYXRpb24gPyBhLmxvY2F0aW9uIDwgYi5sb2NhdGlvbiA/IC0xIDogMSA6IDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT0gJ2V4cGVyaWVuY2UnKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS5leHBlcmllbmNlKSAtIHBhcnNlSW50KGIuZXhwZXJpZW5jZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJKb2JTZWFyY2hSZXN1bHQocmVzdWx0KTtcbiAgICB9XG59XG5cbm5ldyBKb2JTZWFyY2hBcHAoKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==